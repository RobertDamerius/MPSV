%% file : SFunctionMPSVAsynchronousOnlinePlanner.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionMPSVAsynchronousOnlinePlanner
%% 
%% Simulink version      : 24.1 (R2024a) 19-Nov-2023
%% TLC file generated on : 07-Oct-2024 14:51:26

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionMPSVAsynchronousOnlinePlanner';
     def.OutputFcnSpec = 'void MPSV_AsynchronousOnlinePlannerStep(void* work1, uint8 y1[52905], uint8 u1[64193], uint8 u2[1998])';
     def.StartFcnSpec = 'void MPSV_AsynchronousOnlinePlannerInitialize(void** work1, int16 p1, uint32 p2, int16 p3, uint32 p4, int32 p5, int32 p6, int32 p7)';
     def.TerminateFcnSpec = 'void MPSV_AsynchronousOnlinePlannerTerminate(void* work1)';
     def.HeaderFiles = {'MPSV_DriverAsynchronousOnlinePlanner.hpp'};
     def.SourceFiles = {'MPSV_DriverAsynchronousOnlinePlanner.cpp', 'MPSV_WrapperAsynchronousOnlinePlanner.cpp'};
     def.IncPaths = {'code'};
     def.SrcPaths = {'code'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionMPSVAsynchronousOnlinePlanner "C"

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionMPSVAsynchronousOnlinePlanner_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionMPSVAsynchronousOnlinePlanner_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "MPSV_DriverAsynchronousOnlinePlanner.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("MPSV_DriverAsynchronousOnlinePlanner.hpp")>
    %endif
    %<SLibAddToStaticSources("MPSV_DriverAsynchronousOnlinePlanner.cpp")>
    %<SLibAddToStaticSources("MPSV_WrapperAsynchronousOnlinePlanner.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign int32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT32)
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign int16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT16)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionMPSVAsynchronousOnlinePlanner_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Start_%<sfunInstanceName>( void** work1, const %<int16Type> p1, const %<uint32Type> p2, const %<int16Type> p3, const %<uint32Type> p4, const %<int32Type> p5, const %<int32Type> p6, const %<int32Type> p7);
        extern void SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Output_%<sfunInstanceName>( void* work1,  %<uint8Type>* y1, const %<uint8Type>* u1, const %<uint8Type>* u2);
        extern void SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Terminate_%<sfunInstanceName>( void* work1);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionMPSVAsynchronousOnlinePlanner_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "MPSV_DriverAsynchronousOnlinePlanner.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Start_%<sfunInstanceName>( void** work1, const %<int16Type> p1, const %<uint32Type> p2, const %<int16Type> p3, const %<uint32Type> p4, const %<int32Type> p5, const %<int32Type> p6, const %<int32Type> p7) {
            MPSV_AsynchronousOnlinePlannerInitialize(work1, (%<int16Type>)(p1), (%<uint32Type>)(p2), (%<int16Type>)(p3), (%<uint32Type>)(p4), (%<int32Type>)(p5), (%<int32Type>)(p6), (%<int32Type>)(p7));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Output_%<sfunInstanceName>( void* work1,  %<uint8Type>* y1, const %<uint8Type>* u1, const %<uint8Type>* u2) {
            MPSV_AsynchronousOnlinePlannerStep(work1, y1, (%<uint8Type>*)(u1), (%<uint8Type>*)(u2));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Terminate_%<sfunInstanceName>( void* work1) {
            MPSV_AsynchronousOnlinePlannerTerminate(work1);
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Start_%<sfunInstanceName>(%<work1_ptr>, %<p1_val>, %<p2_val>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>);
        
        }
    %else
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %assign p3_val = LibBlockParameter(p3, "", "", 0)
        %assign p4_val = LibBlockParameter(p4, "", "", 0)
        %assign p5_val = LibBlockParameter(p5, "", "", 0)
        %assign p6_val = LibBlockParameter(p6, "", "", 0)
        %assign p7_val = LibBlockParameter(p7, "", "", 0)
        %% 
        MPSV_AsynchronousOnlinePlannerInitialize(%<work1_ptr>, %<p1_val>, %<p2_val>, %<p3_val>, %<p4_val>, %<p5_val>, %<p6_val>, %<p7_val>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_val = LibBlockPWork("", "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Output_%<sfunInstanceName>(%<work1_val>, %<y1_ptr>, %<u1_ptr>, %<u2_ptr>);
        
        }
    %else
        %assign work1_val = LibBlockPWork("", "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %% 
        MPSV_AsynchronousOnlinePlannerStep(%<work1_val>, %<y1_ptr>, (%<uint8Type>*)%<u1_ptr>, (%<uint8Type>*)%<u2_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_val = LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", LibBlockIdentifier(block))
            SFunctionMPSVAsynchronousOnlinePlanner_wrapper_Terminate_%<sfunInstanceName>(%<work1_val>);
        
        }
    %else
        %assign work1_val = LibBlockPWork("", "", "", 0)
        %% 
        MPSV_AsynchronousOnlinePlannerTerminate(%<work1_val>);
    %endif
%endfunction

%% [EOF]
