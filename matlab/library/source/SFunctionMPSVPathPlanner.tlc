%% file : SFunctionMPSVPathPlanner.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionMPSVPathPlanner
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 19-Jun-2024 22:54:09

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionMPSVPathPlanner';
     def.OutputFcnSpec = 'void MPSV_PathPlannerStep(void* work1, uint8 y1[24023], uint8 u1[324566])';
     def.StartFcnSpec = 'void MPSV_PathPlannerInitialize(void** work1, int16 p1, uint32 p2)';
     def.TerminateFcnSpec = 'void MPSV_PathPlannerTerminate(void* work1)';
     def.HeaderFiles = {'MPSV_DriverPathPlanner.hpp'};
     def.SourceFiles = {'MPSV_DriverPathPlanner.cpp', 'MPSV_WrapperPathPlanner.cpp'};
     def.IncPaths = {'code'};
     def.SrcPaths = {'code'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionMPSVPathPlanner "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionMPSVPathPlanner_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionMPSVPathPlanner_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "MPSV_DriverPathPlanner.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("MPSV_DriverPathPlanner.hpp")>
    %endif
    %<SLibAddToStaticSources("MPSV_DriverPathPlanner.cpp")>
    %<SLibAddToStaticSources("MPSV_WrapperPathPlanner.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign int16Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT16)
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionMPSVPathPlanner_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void SFunctionMPSVPathPlanner_wrapper_Start_%<sfunInstanceName>( void** work1, const %<int16Type> p1, const %<uint32Type> p2);
        extern void SFunctionMPSVPathPlanner_wrapper_Output_%<sfunInstanceName>( void* work1,  %<uint8Type>* y1, const %<uint8Type>* u1);
        extern void SFunctionMPSVPathPlanner_wrapper_Terminate_%<sfunInstanceName>( void* work1);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionMPSVPathPlanner_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "MPSV_DriverPathPlanner.hpp"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionMPSVPathPlanner_wrapper_Start_%<sfunInstanceName>( void** work1, const %<int16Type> p1, const %<uint32Type> p2) {
            MPSV_PathPlannerInitialize(work1, (%<int16Type>)(p1), (%<uint32Type>)(p2));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionMPSVPathPlanner_wrapper_Output_%<sfunInstanceName>( void* work1,  %<uint8Type>* y1, const %<uint8Type>* u1) {
            MPSV_PathPlannerStep(work1, y1, (%<uint8Type>*)(u1));
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionMPSVPathPlanner_wrapper_Terminate_%<sfunInstanceName>( void* work1) {
            MPSV_PathPlannerTerminate(work1);
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionMPSVPathPlanner_wrapper_Start_%<sfunInstanceName>(%<work1_ptr>, %<p1_val>, %<p2_val>);
        
        }
    %else
        %assign work1_ptr = "&"+LibBlockPWork("", "", "", 0)
        %assign p1_val = LibBlockParameter(p1, "", "", 0)
        %assign p2_val = LibBlockParameter(p2, "", "", 0)
        %% 
        MPSV_PathPlannerInitialize(%<work1_ptr>, %<p1_val>, %<p2_val>);
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign uint8Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT8)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_val = LibBlockPWork("", "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionMPSVPathPlanner_wrapper_Output_%<sfunInstanceName>(%<work1_val>, %<y1_ptr>, %<u1_ptr>);
        
        }
    %else
        %assign work1_val = LibBlockPWork("", "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
        %% 
        MPSV_PathPlannerStep(%<work1_val>, %<y1_ptr>, (%<uint8Type>*)%<u1_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign work1_val = LibBlockPWork("", "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionMPSVPathPlanner_wrapper_Terminate_%<sfunInstanceName>(%<work1_val>);
        
        }
    %else
        %assign work1_val = LibBlockPWork("", "", "", 0)
        %% 
        MPSV_PathPlannerTerminate(%<work1_val>);
    %endif
%endfunction

%% [EOF]
